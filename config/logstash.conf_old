input {
        file {
                path => '/var/log/mysql/audit.log'
                type => 'percona-audit'
                start_position => 'beginning'
                codec => json
        }
        file {
                path => '/var/log/mysql/slow.log'
                type => 'percona-slow'
                start_position => 'beginning'
                codec => multiline {
                                    pattern => "^# User@Host:"
                                    negate => true
                                    what => previous
                }
        }
}
filter {
        if [type] == 'percona-audit_' {
                date {
                        match => [ "[audit_record][timestamp]", "YYYY-MM-dd'T'H:mm:ss' 'ZZZ", "ISO8601" ]
                        target => ["@timestamp"]
                }

                if [audit_record][user] == "pct[pct] @ localhost [127.0.0.1]" {
                        drop {}
                }

                if [audit_record][command_class] == "select" {
                        grok {
                                match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} %{GREEDYDATA:[audit_record][columns]} (from|FROM) %{WORD:[audit_record][table]}" ]
                                remove_field => "[audit_record][qtype]"
                        }
                }

                if [audit_record][command_class] == "update" {
                        grok {
                                match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} %{WORD:[audit_record][table]}" ]
                                remove_field => "[audit_record][qtype]"
                        }
                }

                if [audit_record][command_class] == "insert" {
                        grok {
                                match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} (into|INTO) %{WORD:[audit_record][table]}" ]
                                remove_field => "[audit_record][qtype]"
                        }
                }

                if [audit_record][command_class] == "" {
                        grok {
                                match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} (into|INTO) %{WORD:[audit_record][table]}" ]
                                remove_field => "[audit_record][qtype]"
                        }
                }

               if [audit_record][command_class] == "delete" {
                        grok {
                                match => [ "[audit_record][sqltext]", "%{WORD:qtype} (from|FROM) %{WORD:[audit_record][table]}" ]
                                remove_field => "[audit_record][qtype]"
                        }
                }

               if [audit_record][command_class] == "alter_table" {
                        grok {
                                match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:object} %{DATA:[audit_record][table]} %{DATA:[audit_record][verb]} %{DATA:[audit_record][struct]} %{GREEDYDATA})" ]
                                remove_field => "object"
                                remove_field => "[audit_record][qtype]"
                        }
                }

                if [audit_record][command_class] == "set_option" {
                        grok {
                                match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:[audit_record][scope]} %{WORD:[audit_record][variable]}(=| = )%{GREEDYDATA:[audit_record][value]})" ]
                                remove_field => "[audit_record][qtype]"
                        }
                }

                if [audit_record][command_class] == "grant" {
                        grok {
                                match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:[audit_record][scope]} %{WORD:[audit_record][variable]}(=| = )%{GREEDYDATA:[audit_record][value]})" ]
                                remove_field => "[audit_record][qtype]"
                        }
                }
        } #end audit
        else if [type] == 'percona-slow' {
                grok {
                  match => [ "message", "^# User@Host: %{USER:user}.*@ %{HOST:host}.*$" ]
                }
                grok {
                  match => [ "message", "# Query_time: %{NUMBER:duration}.*Lock_time: %{NUMBER:lock_wait}.*Rows_sent: %{NUMBER:sent}.*Rows_examined: %{NUMBER:examined}.*Rows_affected: %{NUMBER:affected}$"]
                }
                grok {
                  match => [ "message", "SET timestamp=%{NUMBER:timestamp};" ]
                }
                grok {
                  match => [ "message", "^%{GREEDYDATA:class} +.* +(from|FROM) %{GREEDYDATA:table}.*$"]
                }
                grok {
                  match => [ "message", "^%{GREEDYDATA:class} +.* +(into|INTO) +%{GREEDYDATA:table}.*$"]
                }
                grok {
                  match => [ "message", "^%{GREEDYDATA:class} +%{GREEDYDATA:table}.* (set|SET).*$"]
                }
                date {
                  match => [ "timestamp", "UNIX" ]
                }
                mutate {
                  remove_field => "timestamp"
                }
          }
}


output {
#        if [audit_record][command_class] == "alter_table" {
#            hipchat {
#                    room_id => "audit_room"
#                    message => "Alter table has been executed!"
#                    token => "b9755861fb1affc93c9c7167c4f9dc"
#                    trigger_notify => true
#            }
#        }

#        redis {
#                host => '172.17.0.4'
#                data_type => 'list'
#                key => 'logstash'
#        }
        stdout { codec => "rubydebug" }

        elasticsearch {
                  host => '127.0.0.1'

}



}
