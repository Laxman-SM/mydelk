input {
        file {
                path => '/var/log/mysql/audit.log_'
                type => 'percona-audit'
                start_position => 'beginning'
                codec => json
        }
        file {
                path => '/var/log/mysql/slow.log'
                type => 'percona-slow'
                start_position => 'beginning'
                codec => multiline {
                                    pattern => "^# User@Host:"
                                    negate => true
                                    what => previous
                }
        }
}
filter {
        if [type] == 'percona-audit' {
                date {
                        match => [ "[audit_record][timestamp]", "YYYY-MM-dd'T'H:mm:ss' 'ZZZ", "ISO8601" ]
                        target => ["@timestamp"]
                }

                grok {
                  if [audit_record][command_class] == "select" {
                       match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} %{GREEDYDATA:[audit_record][columns]} (from|FROM) %{WORD:[audit_record][table]}" ]
                       remove_field => "[audit_record][qtype]"
                  }
                  else if [audit_record][command_class] == "update" {
                       match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} %{WORD:[audit_record][table]}" ]
                       remove_field => "[audit_record][qtype]"
                  }
                  else if [audit_record][command_class] == "insert" {
                       match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} (into|INTO) %{WORD:[audit_record][table]}" ]
                       remove_field => "[audit_record][qtype]"
                  }
                  else if [audit_record][command_class] == "replace" {
                       match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} (into|INTO) %{WORD:[audit_record][table]}" ]
                       remove_field => "[audit_record][qtype]"
                  }
                  else if [audit_record][command_class] == "delete" {
                       match => [ "[audit_record][sqltext]", "%{WORD:qtype} (from|FROM) %{WORD:[audit_record][table]}" ]
                       remove_field => "[audit_record][qtype]"
                   }
                  else if [audit_record][command_class] == "alter_table" {
                       match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:object} %{DATA:[audit_record][table]} %{DATA:[audit_record][verb]} %{DATA:[audit_record][struct]} %{GREEDYDATA})" ]
                       remove_field => "object"
                       remove_field => "[audit_record][qtype]"
                    }
                  else if [audit_record][command_class] == "set_option" {
                       match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:[audit_record][scope]} %{WORD:[audit_record][variable]}(=| = )%{GREEDYDATA:[audit_record][value]})" ]
                       remove_field => "[audit_record][qtype]"
                  }
                  else if [audit_record][command_class] == "grant" {
                       match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:[audit_record][scope]} %{WORD:[audit_record][variable]}(=| = )%{GREEDYDATA:[audit_record][value]})" ]
                       remove_field => "[audit_record][qtype]"
                  }
                }
        } #end audit
        else if [type] == 'percona-slow' {
                grok {
                  patterns_dir => "/etc/logstash/patterns/"
                  match => [ "message", "SET timestamp=%{NUMBER:timestamp};" ]
                  match => [ "message", "^# Query_time: %{NUMBER:duration}.*Lock_time: %{NUMBER:lock_wait}.*Rows_sent: %{NUMBER:sent}.*Rows_examined: %{NUMBER:examined}.*Rows_affected: %{NUMBER:affected}$"]
                  match => [ "message", "^# User@Host: %{USER:user}.*@ %{HOST:userhost}.*$" ]
                  match => [ "message", "%{INSRPL}" ]
                  match => [ "message", "%{UPDATE}" ]
                  match => [ "message", "%{SELECT}" ]
                  match => [ "message", "%{DELETE}" ]
                  match => [ "message", "!(^#) %{ALLQUERY}" ]
                }
                # convert timestamp
                date {
                  match => [ "timestamp", "UNIX" ]
                }
                # drop the logstash or the 'seen' timestamp
                mutate {
                  remove_field => "timestamp"
                }
          }
}

output {
        stdout { codec => "rubydebug" }

        elasticsearch {
                  host => '127.0.0.1'
        }
}
